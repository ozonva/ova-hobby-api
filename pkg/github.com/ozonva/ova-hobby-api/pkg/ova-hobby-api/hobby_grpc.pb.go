// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_hobby_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HobbyAPIClient is the client API for HobbyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HobbyAPIClient interface {
	CreateHobby(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*HobbyReply, error)
	DescribeHobby(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*HobbyReply, error)
	ListHobby(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	RemoveHobby(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hobbyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHobbyAPIClient(cc grpc.ClientConnInterface) HobbyAPIClient {
	return &hobbyAPIClient{cc}
}

func (c *hobbyAPIClient) CreateHobby(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*HobbyReply, error) {
	out := new(HobbyReply)
	err := c.cc.Invoke(ctx, "/ova.hobby.api.HobbyAPI/CreateHobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyAPIClient) DescribeHobby(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*HobbyReply, error) {
	out := new(HobbyReply)
	err := c.cc.Invoke(ctx, "/ova.hobby.api.HobbyAPI/DescribeHobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyAPIClient) ListHobby(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/ova.hobby.api.HobbyAPI/ListHobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyAPIClient) RemoveHobby(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.hobby.api.HobbyAPI/RemoveHobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HobbyAPIServer is the server API for HobbyAPI service.
// All implementations must embed UnimplementedHobbyAPIServer
// for forward compatibility
type HobbyAPIServer interface {
	CreateHobby(context.Context, *CreateRequest) (*HobbyReply, error)
	DescribeHobby(context.Context, *DescribeRequest) (*HobbyReply, error)
	ListHobby(context.Context, *ListRequest) (*ListReply, error)
	RemoveHobby(context.Context, *RemoveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHobbyAPIServer()
}

// UnimplementedHobbyAPIServer must be embedded to have forward compatible implementations.
type UnimplementedHobbyAPIServer struct {
}

func (UnimplementedHobbyAPIServer) CreateHobby(context.Context, *CreateRequest) (*HobbyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHobby not implemented")
}
func (UnimplementedHobbyAPIServer) DescribeHobby(context.Context, *DescribeRequest) (*HobbyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeHobby not implemented")
}
func (UnimplementedHobbyAPIServer) ListHobby(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHobby not implemented")
}
func (UnimplementedHobbyAPIServer) RemoveHobby(context.Context, *RemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHobby not implemented")
}
func (UnimplementedHobbyAPIServer) mustEmbedUnimplementedHobbyAPIServer() {}

// UnsafeHobbyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HobbyAPIServer will
// result in compilation errors.
type UnsafeHobbyAPIServer interface {
	mustEmbedUnimplementedHobbyAPIServer()
}

func RegisterHobbyAPIServer(s grpc.ServiceRegistrar, srv HobbyAPIServer) {
	s.RegisterService(&HobbyAPI_ServiceDesc, srv)
}

func _HobbyAPI_CreateHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyAPIServer).CreateHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.hobby.api.HobbyAPI/CreateHobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyAPIServer).CreateHobby(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyAPI_DescribeHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyAPIServer).DescribeHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.hobby.api.HobbyAPI/DescribeHobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyAPIServer).DescribeHobby(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyAPI_ListHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyAPIServer).ListHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.hobby.api.HobbyAPI/ListHobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyAPIServer).ListHobby(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyAPI_RemoveHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyAPIServer).RemoveHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.hobby.api.HobbyAPI/RemoveHobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyAPIServer).RemoveHobby(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HobbyAPI_ServiceDesc is the grpc.ServiceDesc for HobbyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HobbyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.hobby.api.HobbyAPI",
	HandlerType: (*HobbyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHobby",
			Handler:    _HobbyAPI_CreateHobby_Handler,
		},
		{
			MethodName: "DescribeHobby",
			Handler:    _HobbyAPI_DescribeHobby_Handler,
		},
		{
			MethodName: "ListHobby",
			Handler:    _HobbyAPI_ListHobby_Handler,
		},
		{
			MethodName: "RemoveHobby",
			Handler:    _HobbyAPI_RemoveHobby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hobby.proto",
}
